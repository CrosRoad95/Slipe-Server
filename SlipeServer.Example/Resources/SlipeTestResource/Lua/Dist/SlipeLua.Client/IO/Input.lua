-- Generated by CSharp.lua Compiler
local System = System
local SlipeLuaMtaDefinitions = SlipeLua.MtaDefinitions
local SlipeLuaSharedIO = SlipeLua.Shared.IO
local DictDelegateDelegate = System.Dictionary(System.Delegate, System.Delegate)
System.namespace("SlipeLua.Client.IO", function (namespace)
  --/ <summary>
  --/ Class that handles various types of user input
  --/ </summary>
  namespace.class("Input", function (namespace)
    local closures, BindKey, UnbindKey, BindKey1, UnbindKey1, IsKeyPressed, GetAnalogControlState, SetAnalogControlState, 
    SetControlEnabled, IsControlEnabled, SetAllControlsEnabled, KeyboardReadingLayout, addOnKey, removeOnKey, addOnCharacter, removeOnCharacter, 
    class, static
    static = function (this)
      closures = DictDelegateDelegate()
    end
    BindKey = function (key, state, command)
      return SlipeLuaMtaDefinitions.MtaClient.BindKey(key, state:EnumToString(SlipeLuaSharedIO.KeyState):ToLower(), command)
    end
    UnbindKey = function (key, state, command)
      return SlipeLuaMtaDefinitions.MtaClient.UnbindKey(key, state:EnumToString(SlipeLuaSharedIO.KeyState):ToLower(), command)
    end
    BindKey1 = function (key, state, handler)
      local rawClosure = function (command, closureState)
        handler(command, System.cast(System.Int32, System.Enum.Parse(System.typeof(SlipeLuaSharedIO.KeyState), closureState, true)))
      end
      closures:set(handler, rawClosure)
      return SlipeLuaMtaDefinitions.MtaClient.BindKey(key, state:EnumToString(SlipeLuaSharedIO.KeyState):ToLower(), rawClosure)
    end
    UnbindKey1 = function (key, state, handler)
      if closures:ContainsKey(handler) then
        local result = SlipeLuaMtaDefinitions.MtaClient.UnbindKey(key, state:EnumToString(SlipeLuaSharedIO.KeyState):ToLower(), closures:get(handler))
        closures:RemoveKey(handler)
        return result
      end
      return false
    end
    IsKeyPressed = function (keyName)
      return SlipeLuaMtaDefinitions.MtaClient.GetKeyState(keyName)
    end
    GetAnalogControlState = function (control)
      return SlipeLuaMtaDefinitions.MtaClient.GetAnalogControlState(control)
    end
    SetAnalogControlState = function (control, value)
      return SlipeLuaMtaDefinitions.MtaClient.SetAnalogControlState(control, value)
    end
    SetControlEnabled = function (control, value)
      return SlipeLuaMtaDefinitions.MtaClient.ToggleControl(control, value)
    end
    IsControlEnabled = function (control)
      return SlipeLuaMtaDefinitions.MtaClient.IsControlEnabled(control)
    end
    SetAllControlsEnabled = function (value, mtaControls, gtaControls)
      return SlipeLuaMtaDefinitions.MtaClient.ToggleAllControls(value, gtaControls, mtaControls)
    end
    KeyboardReadingLayout = function ()
      return SlipeLuaMtaDefinitions.MtaClient.GetKeyboardReadingLayout()
    end
    addOnKey = function (value)
      class.OnKey = class.OnKey + value
    end
    removeOnKey = function (value)
      class.OnKey = class.OnKey - value
    end
    addOnCharacter = function (value)
      class.OnCharacter = class.OnCharacter + value
    end
    removeOnCharacter = function (value)
      class.OnCharacter = class.OnCharacter - value
    end
    class = {
      BindKey = BindKey,
      UnbindKey = UnbindKey,
      BindKey1 = BindKey1,
      UnbindKey1 = UnbindKey1,
      IsKeyPressed = IsKeyPressed,
      GetAnalogControlState = GetAnalogControlState,
      SetAnalogControlState = SetAnalogControlState,
      SetControlEnabled = SetControlEnabled,
      IsControlEnabled = IsControlEnabled,
      SetAllControlsEnabled = SetAllControlsEnabled,
      KeyboardReadingLayout = KeyboardReadingLayout,
      addOnKey = addOnKey,
      removeOnKey = removeOnKey,
      addOnCharacter = addOnCharacter,
      removeOnCharacter = removeOnCharacter,
      static = static,
      __metadata__ = function (out)
        return {
          fields = {
            { "closures", 0x9, System.Dictionary(System.Delegate(System.String, System.Int32, System.Void), System.Delegate(System.String, System.String, System.Void)) }
          },
          methods = {
            { "BindKey", 0x38E, BindKey, System.String, System.Int32, System.String, System.Boolean },
            { "BindKey", 0x38E, BindKey1, System.String, System.Int32, System.Delegate(System.String, System.Int32, System.Void), System.Boolean },
            { "GetAnalogControlState", 0x18E, GetAnalogControlState, System.String, System.Single },
            { "IsControlEnabled", 0x18E, IsControlEnabled, System.String, System.Boolean },
            { "IsKeyPressed", 0x18E, IsKeyPressed, System.String, System.Boolean },
            { "KeyboardReadingLayout", 0x8E, KeyboardReadingLayout, System.String },
            { "SetAllControlsEnabled", 0x38E, SetAllControlsEnabled, System.Boolean, System.Boolean, System.Boolean, System.Boolean },
            { "SetAnalogControlState", 0x28E, SetAnalogControlState, System.String, System.Single, System.Boolean },
            { "SetControlEnabled", 0x28E, SetControlEnabled, System.String, System.Boolean, System.Boolean },
            { "UnbindKey", 0x38E, UnbindKey, System.String, System.Int32, System.String, System.Boolean },
            { "UnbindKey", 0x38E, UnbindKey1, System.String, System.Int32, System.Delegate(System.String, System.Int32, System.Void), System.Boolean }
          },
          class = { 0xE }
        }
      end
    }
    return class
  end)
end)
