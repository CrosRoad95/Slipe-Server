-- Generated by CSharp.lua Compiler
local System = System
local SlipeLuaMtaDefinitions = SlipeLua.MtaDefinitions
local SlipeLuaSharedElements = SlipeLua.Shared.Elements
local SlipeLuaSharedVehicles = SlipeLua.Shared.Vehicles
local SystemNumerics = System.Numerics
local SlipeLuaClientPeds
local SlipeLuaClientVehicles
local ArrayComponent
local DictInt32Player
System.import(function (out)
  SlipeLuaClientPeds = SlipeLua.Client.Peds
  SlipeLuaClientVehicles = SlipeLua.Client.Vehicles
  ArrayComponent = System.Array(SlipeLuaClientVehicles.Component)
  DictInt32Player = System.Dictionary(System.Int32, SlipeLuaClientPeds.Player)
end)
System.namespace("SlipeLua.Client.Vehicles", function (namespace)
  --/ <summary>
  --/ Abstract class for client-side vehicles
  --/ </summary>
  namespace.class("BaseVehicle", function (namespace)
    local getControler, getOccupants, getAdjustableProperty, setAdjustableProperty, getComponents, getCurrentGear, getGravity, setGravity, 
    getNitroCount, setNitroCount, getNitroLevel, setNitroLevel, getNitroActivated, setNitroActivated, getIsNitroRecharging, Blow, 
    GetOccupant, GetComponent, IsWheelOnGround, isWindowOpen, SetWindowOpen, addOnCollisionShapeHit, removeOnCollisionShapeHit, addOnCollisionShapeLeave, 
    removeOnCollisionShapeLeave, addOnCollision, removeOnCollision, addOnDamage, removeOnDamage, addOnEnter, removeOnEnter, addOnExit, 
    removeOnExit, addOnStartEnter, removeOnStartEnter, addOnStartExit, removeOnStartExit, addOnExplode, removeOnExplode, addOnRespawn, 
    removeOnRespawn, addOnNitroStateChange, removeOnNitroStateChange, addOnExplosion, removeOnExplosion, addOnWorldSound, removeOnWorldSound, addOnWeaponHit, 
    removeOnWeaponHit, __ctor1__, __ctor2__
    __ctor1__ = function (this, element)
      SlipeLuaSharedVehicles.SharedVehicle.__ctor__(this, element)
    end
    __ctor2__ = function (this, model, position, rotation, numberplate, variant1, variant2)
      __ctor1__(this, SlipeLuaMtaDefinitions.MtaClient.CreateVehicle(model.Id, position.X, position.Y, position.Z, rotation.X, rotation.Y, rotation.Z, numberplate, variant1, variant2))
    end
    getControler = function (this)
      return SlipeLuaSharedElements.ElementManager.getInstance():GetElement(SlipeLuaMtaDefinitions.MtaShared.GetVehicleController(this.element), SlipeLuaClientPeds.Player)
    end
    getOccupants = function (this)
      local elements = SlipeLuaMtaDefinitions.MtaShared.GetDictionaryFromTable(SlipeLuaMtaDefinitions.MtaShared.GetVehicleOccupants(this.element), "System.Int32", "MTAElement")
      local dictionary = DictInt32Player()
      for _, entry in System.each(elements) do
        local p = SlipeLuaSharedElements.ElementManager.getInstance():GetElement(entry[2], SlipeLuaClientPeds.Player)
        local s = entry[1]
        dictionary:AddKeyValue(s, p)
      end
      return dictionary
    end
    getAdjustableProperty = function (this)
      return SlipeLuaMtaDefinitions.MtaClient.GetVehicleAdjustableProperty(this.element)
    end
    setAdjustableProperty = function (this, value)
      SlipeLuaMtaDefinitions.MtaClient.SetVehicleAdjustableProperty(this.element, value)
    end
    getComponents = function (this)
      local d = SlipeLuaMtaDefinitions.MtaShared.GetDictionaryFromTable(SlipeLuaMtaDefinitions.MtaClient.GetVehicleComponents(this.element), "System.String", "System.Boolean")
      local r = ArrayComponent(d:getCount())
      local count = 0
      for _, c in System.each(d) do
        r:set(count, System.new(SlipeLuaClientVehicles.Component, 2, this, c[1], 1))
        count = count + 1
      end
      return r
    end
    getCurrentGear = function (this)
      return SlipeLuaMtaDefinitions.MtaClient.GetVehicleCurrentGear(this.element)
    end
    getGravity = function (this)
      local r = SlipeLuaMtaDefinitions.MtaClient.GetVehicleGravity(this.element)
      return SystemNumerics.Vector3(r[1], r[2], r[3])
    end
    setGravity = function (this, value)
      SlipeLuaMtaDefinitions.MtaClient.SetVehicleGravity(this.element, value.X, value.Y, value.Z)
    end
    getNitroCount = function (this)
      return SlipeLuaMtaDefinitions.MtaClient.GetVehicleNitroCount(this.element)
    end
    setNitroCount = function (this, value)
      SlipeLuaMtaDefinitions.MtaClient.SetVehicleNitroCount(this.element, value)
    end
    getNitroLevel = function (this)
      return SlipeLuaMtaDefinitions.MtaClient.GetVehicleNitroLevel(this.element)
    end
    setNitroLevel = function (this, value)
      SlipeLuaMtaDefinitions.MtaClient.SetVehicleNitroLevel(this.element, value)
    end
    getNitroActivated = function (this)
      return SlipeLuaMtaDefinitions.MtaClient.IsVehicleNitroActivated(this.element)
    end
    setNitroActivated = function (this, value)
      SlipeLuaMtaDefinitions.MtaClient.SetVehicleNitroActivated(this.element, value)
    end
    getIsNitroRecharging = function (this)
      return SlipeLuaMtaDefinitions.MtaClient.IsVehicleNitroRecharging(this.element)
    end
    Blow = function (this)
      return SlipeLuaMtaDefinitions.MtaClient.BlowVehicle(this.element)
    end
    GetOccupant = function (this, seat)
      return SlipeLuaSharedElements.ElementManager.getInstance():GetElement(SlipeLuaMtaDefinitions.MtaShared.GetVehicleOccupant(this.element, seat), SlipeLuaClientPeds.Player)
    end
    GetComponent = function (this, type, relativeTo)
      return SlipeLuaClientVehicles.Component(this, type, relativeTo)
    end
    IsWheelOnGround = function (this, wheel)
      return SlipeLuaMtaDefinitions.MtaClient.IsVehicleWheelOnGround(this.element, wheel)
    end
    isWindowOpen = function (this, window)
      return SlipeLuaMtaDefinitions.MtaClient.IsVehicleWindowOpen(this.element, window)
    end
    SetWindowOpen = function (this, window, open)
      return SlipeLuaMtaDefinitions.MtaClient.SetVehicleWindowOpen(this.element, window, open)
    end
    addOnCollisionShapeHit, removeOnCollisionShapeHit = System.event("OnCollisionShapeHit")
    addOnCollisionShapeLeave, removeOnCollisionShapeLeave = System.event("OnCollisionShapeLeave")
    addOnCollision, removeOnCollision = System.event("OnCollision")
    addOnDamage, removeOnDamage = System.event("OnDamage")
    addOnEnter, removeOnEnter = System.event("OnEnter")
    addOnExit, removeOnExit = System.event("OnExit")
    addOnStartEnter, removeOnStartEnter = System.event("OnStartEnter")
    addOnStartExit, removeOnStartExit = System.event("OnStartExit")
    addOnExplode, removeOnExplode = System.event("OnExplode")
    addOnRespawn, removeOnRespawn = System.event("OnRespawn")
    addOnNitroStateChange, removeOnNitroStateChange = System.event("OnNitroStateChange")
    addOnExplosion, removeOnExplosion = System.event("OnExplosion")
    addOnWorldSound, removeOnWorldSound = System.event("OnWorldSound")
    addOnWeaponHit, removeOnWeaponHit = System.event("OnWeaponHit")
    return {
      base = function (out)
        return {
          out.SlipeLua.Shared.Vehicles.SharedVehicle
        }
      end,
      getControler = getControler,
      getOccupants = getOccupants,
      getAdjustableProperty = getAdjustableProperty,
      setAdjustableProperty = setAdjustableProperty,
      getComponents = getComponents,
      getCurrentGear = getCurrentGear,
      getGravity = getGravity,
      setGravity = setGravity,
      getNitroCount = getNitroCount,
      setNitroCount = setNitroCount,
      getNitroLevel = getNitroLevel,
      setNitroLevel = setNitroLevel,
      getNitroActivated = getNitroActivated,
      setNitroActivated = setNitroActivated,
      getIsNitroRecharging = getIsNitroRecharging,
      Blow = Blow,
      GetOccupant = GetOccupant,
      GetComponent = GetComponent,
      IsWheelOnGround = IsWheelOnGround,
      isWindowOpen = isWindowOpen,
      SetWindowOpen = SetWindowOpen,
      addOnCollisionShapeHit = addOnCollisionShapeHit,
      removeOnCollisionShapeHit = removeOnCollisionShapeHit,
      addOnCollisionShapeLeave = addOnCollisionShapeLeave,
      removeOnCollisionShapeLeave = removeOnCollisionShapeLeave,
      addOnCollision = addOnCollision,
      removeOnCollision = removeOnCollision,
      addOnDamage = addOnDamage,
      removeOnDamage = removeOnDamage,
      addOnEnter = addOnEnter,
      removeOnEnter = removeOnEnter,
      addOnExit = addOnExit,
      removeOnExit = removeOnExit,
      addOnStartEnter = addOnStartEnter,
      removeOnStartEnter = removeOnStartEnter,
      addOnStartExit = addOnStartExit,
      removeOnStartExit = removeOnStartExit,
      addOnExplode = addOnExplode,
      removeOnExplode = removeOnExplode,
      addOnRespawn = addOnRespawn,
      removeOnRespawn = removeOnRespawn,
      addOnNitroStateChange = addOnNitroStateChange,
      removeOnNitroStateChange = removeOnNitroStateChange,
      addOnExplosion = addOnExplosion,
      removeOnExplosion = removeOnExplosion,
      addOnWorldSound = addOnWorldSound,
      removeOnWorldSound = removeOnWorldSound,
      addOnWeaponHit = addOnWeaponHit,
      removeOnWeaponHit = removeOnWeaponHit,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      },
      __metadata__ = function (out)
        return {
          properties = {
            { "AdjustableProperty", 0x106, System.Int32, getAdjustableProperty, setAdjustableProperty },
            { "Components", 0x206, System.Array(out.SlipeLua.Client.Vehicles.Component), getComponents },
            { "Controler", 0x206, out.SlipeLua.Client.Peds.Player, getControler },
            { "CurrentGear", 0x206, System.Int32, getCurrentGear },
            { "Gravity", 0x106, System.Numerics.Vector3, getGravity, setGravity },
            { "IsNitroRecharging", 0x206, System.Boolean, getIsNitroRecharging },
            { "NitroActivated", 0x106, System.Boolean, getNitroActivated, setNitroActivated },
            { "NitroCount", 0x106, System.Int32, getNitroCount, setNitroCount },
            { "NitroLevel", 0x106, System.Single, getNitroLevel, setNitroLevel },
            { "Occupants", 0x206, System.Dictionary(System.Int32, out.SlipeLua.Client.Peds.Player), getOccupants }
          },
          methods = {
            { ".ctor", 0x106, __ctor1__, out.SlipeLua.MtaDefinitions.MtaElement },
            { ".ctor", 0x603, __ctor2__, out.SlipeLua.Client.Vehicles.VehicleModel, System.Numerics.Vector3, System.Numerics.Vector3, System.String, System.Int32, System.Int32 },
            { "Blow", 0x86, Blow, System.Boolean },
            { "GetComponent", 0x286, GetComponent, System.Int32, System.Int32, out.SlipeLua.Client.Vehicles.Component },
            { "GetOccupant", 0x186, GetOccupant, System.Int32, out.SlipeLua.Client.Peds.Player },
            { "IsWheelOnGround", 0x186, IsWheelOnGround, System.Int32, System.Boolean },
            { "SetWindowOpen", 0x286, SetWindowOpen, System.Int32, System.Boolean, System.Boolean },
            { "isWindowOpen", 0x186, isWindowOpen, System.Int32, System.Boolean }
          },
          class = { 0x6 }
        }
      end
    }
  end)
end)
