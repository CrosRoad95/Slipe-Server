-- Generated by CSharp.lua Compiler
local System = System
local SlipeLuaMtaDefinitions = SlipeLua.MtaDefinitions
local SlipeLuaSharedHelpers = SlipeLua.Shared.Helpers
local SlipeLuaClientGame
local SlipeLuaClientIO
System.import(function (out)
  SlipeLuaClientGame = SlipeLua.Client.Game
  SlipeLuaClientIO = SlipeLua.Client.IO
end)
System.namespace("SlipeLua.Client.Game", function (namespace)
  --/ <summary>
  --/ Static class that handles calls to functions related to the client
  --/ </summary>
  namespace.class("GameClient", function (namespace)
    local getEngine, console, getConsole, debug, getDebug, getIsVoiceEnabled, getGuiInputEnabled, setGuiInputEnabled, 
    getInputMode, setInputMode, getIsMainMenuActive, getIsMtaWindowActive, getIsTransferBoxActive, getTickCount, version, getVersion, 
    getLocalization, getIsTrayNotificationEnabled, CreateTrayNotification, SetClipboard, SetWindowFlashing, addOnFileDownloadComplete, removeOnFileDownloadComplete, addOnStart, 
    removeOnStart, addOnStop, removeOnStop, addOnUpdate, removeOnUpdate, addOnMinimize, removeOnMinimize, addOnNetworkInteruption, 
    removeOnNetworkInteruption, addOnRestore, removeOnRestore, class
    getEngine = function ()
      return SlipeLuaClientGame.Engine.getInstance()
    end
    getConsole = function ()
      if console == nil then
        console = SlipeLuaClientIO.MtaConsole()
      end
      return console
    end
    getDebug = function ()
      if debug == nil then
        debug = SlipeLuaClientIO.MtaDebug()
      end
      return debug
    end
    getIsVoiceEnabled = function ()
      return SlipeLuaMtaDefinitions.MtaShared.IsVoiceEnabled()
    end
    getGuiInputEnabled = function ()
      return SlipeLuaMtaDefinitions.MtaClient.GuiGetInputEnabled()
    end
    setGuiInputEnabled = function (value)
      SlipeLuaMtaDefinitions.MtaClient.GuiSetInputEnabled(value)
    end
    getInputMode = function ()
      return System.cast(System.Int32, System.Enum.Parse(System.typeof(SlipeLuaClientGame.InputMode), SlipeLuaMtaDefinitions.MtaClient.GuiGetInputMode(), true))
    end
    setInputMode = function (value)
      SlipeLuaMtaDefinitions.MtaClient.GuiSetInputMode(value:EnumToString(SlipeLuaClientGame.InputMode):ToLower())
    end
    getIsMainMenuActive = function ()
      return SlipeLuaMtaDefinitions.MtaClient.IsMainMenuActive()
    end
    getIsMtaWindowActive = function ()
      return SlipeLuaMtaDefinitions.MtaClient.IsMTAWindowActive()
    end
    getIsTransferBoxActive = function ()
      return SlipeLuaMtaDefinitions.MtaClient.IsTransferBoxActive()
    end
    getTickCount = function ()
      return SlipeLuaMtaDefinitions.MtaShared.GetTickCount()
    end
    getVersion = function ()
      if version == nil then
        version = SlipeLuaSharedHelpers.SystemVersion()
      end
      return version
    end
    getLocalization = function ()
      local d = SlipeLuaMtaDefinitions.MtaShared.GetDictionaryFromTable(SlipeLuaMtaDefinitions.MtaClient.GetLocalization(), "System.String", "System.String")
      return System.Tuple(d:get("code"), d:get("name"))
    end
    getIsTrayNotificationEnabled = function ()
      return SlipeLuaMtaDefinitions.MtaClient.IsTrayNotificationEnabled()
    end
    CreateTrayNotification = function (text, trayIcon, useSound)
      SlipeLuaMtaDefinitions.MtaClient.CreateTrayNotification(text, trayIcon:EnumToString(SlipeLuaClientGame.TrayIconType):ToLower(), useSound)
    end
    SetClipboard = function (text)
      return SlipeLuaMtaDefinitions.MtaClient.SetClipboard(text)
    end
    SetWindowFlashing = function (shouldFlash, count)
      return SlipeLuaMtaDefinitions.MtaClient.SetWindowFlashing(shouldFlash, count)
    end
    addOnFileDownloadComplete = function (value)
      class.OnFileDownloadComplete = class.OnFileDownloadComplete + value
    end
    removeOnFileDownloadComplete = function (value)
      class.OnFileDownloadComplete = class.OnFileDownloadComplete - value
    end
    addOnStart = function (value)
      class.OnStart = class.OnStart + value
    end
    removeOnStart = function (value)
      class.OnStart = class.OnStart - value
    end
    addOnStop = function (value)
      class.OnStop = class.OnStop + value
    end
    removeOnStop = function (value)
      class.OnStop = class.OnStop - value
    end
    addOnUpdate = function (value)
      class.OnUpdate = class.OnUpdate + value
    end
    removeOnUpdate = function (value)
      class.OnUpdate = class.OnUpdate - value
    end
    addOnMinimize = function (value)
      class.OnMinimize = class.OnMinimize + value
    end
    removeOnMinimize = function (value)
      class.OnMinimize = class.OnMinimize - value
    end
    addOnNetworkInteruption = function (value)
      class.OnNetworkInteruption = class.OnNetworkInteruption + value
    end
    removeOnNetworkInteruption = function (value)
      class.OnNetworkInteruption = class.OnNetworkInteruption - value
    end
    addOnRestore = function (value)
      class.OnRestore = class.OnRestore + value
    end
    removeOnRestore = function (value)
      class.OnRestore = class.OnRestore - value
    end
    class = {
      getEngine = getEngine,
      getConsole = getConsole,
      getDebug = getDebug,
      getIsVoiceEnabled = getIsVoiceEnabled,
      getGuiInputEnabled = getGuiInputEnabled,
      setGuiInputEnabled = setGuiInputEnabled,
      getInputMode = getInputMode,
      setInputMode = setInputMode,
      getIsMainMenuActive = getIsMainMenuActive,
      getIsMtaWindowActive = getIsMtaWindowActive,
      getIsTransferBoxActive = getIsTransferBoxActive,
      getTickCount = getTickCount,
      getVersion = getVersion,
      getLocalization = getLocalization,
      getIsTrayNotificationEnabled = getIsTrayNotificationEnabled,
      CreateTrayNotification = CreateTrayNotification,
      SetClipboard = SetClipboard,
      SetWindowFlashing = SetWindowFlashing,
      addOnFileDownloadComplete = addOnFileDownloadComplete,
      removeOnFileDownloadComplete = removeOnFileDownloadComplete,
      addOnStart = addOnStart,
      removeOnStart = removeOnStart,
      addOnStop = addOnStop,
      removeOnStop = removeOnStop,
      addOnUpdate = addOnUpdate,
      removeOnUpdate = removeOnUpdate,
      addOnMinimize = addOnMinimize,
      removeOnMinimize = removeOnMinimize,
      addOnNetworkInteruption = addOnNetworkInteruption,
      removeOnNetworkInteruption = removeOnNetworkInteruption,
      addOnRestore = addOnRestore,
      removeOnRestore = removeOnRestore,
      __metadata__ = function (out)
        return {
          properties = {
            { "Console", 0x20E, out.SlipeLua.Client.IO.MtaConsole, getConsole },
            { "Debug", 0x20E, out.SlipeLua.Client.IO.MtaDebug, getDebug },
            { "Engine", 0x20E, out.SlipeLua.Client.Game.Engine, getEngine },
            { "GuiInputEnabled", 0x10E, System.Boolean, getGuiInputEnabled, setGuiInputEnabled },
            { "InputMode", 0x10E, System.Int32, getInputMode, setInputMode },
            { "IsMainMenuActive", 0x20E, System.Boolean, getIsMainMenuActive },
            { "IsMtaWindowActive", 0x20E, System.Boolean, getIsMtaWindowActive },
            { "IsTransferBoxActive", 0x20E, System.Boolean, getIsTransferBoxActive },
            { "IsTrayNotificationEnabled", 0x20E, System.Boolean, getIsTrayNotificationEnabled },
            { "IsVoiceEnabled", 0x20E, System.Boolean, getIsVoiceEnabled },
            { "Localization", 0x20E, System.Tuple, getLocalization },
            { "TickCount", 0x20E, System.Int32, getTickCount },
            { "Version", 0x20E, out.SlipeLua.Shared.Helpers.SystemVersion, getVersion }
          },
          fields = {
            { "console", 0x9, out.SlipeLua.Client.IO.MtaConsole },
            { "debug", 0x9, out.SlipeLua.Client.IO.MtaDebug },
            { "version", 0x9, out.SlipeLua.Shared.Helpers.SystemVersion }
          },
          methods = {
            { "CreateTrayNotification", 0x30E, CreateTrayNotification, System.String, System.Int32, System.Boolean },
            { "SetClipboard", 0x18E, SetClipboard, System.String, System.Boolean },
            { "SetWindowFlashing", 0x28E, SetWindowFlashing, System.Boolean, System.Int32, System.Boolean }
          },
          class = { 0xE }
        }
      end
    }
    return class
  end)
end)
